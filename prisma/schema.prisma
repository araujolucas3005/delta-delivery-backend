// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProductType {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Product Product[]

  @@map("product_types")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  imageUrl    String?
  price       Int?
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  productType   ProductType @relation(fields: [productTypeId], references: [id])
  productTypeId String      @map("product_type_id")

  productsOrders ProductsOrders[]
  sizes          ProductSizesProducts[]

  @@map("products")
}

model PaymentMethod {
  id        String   @id @default(uuid())
  type      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Order Order[]

  @@map("payment_methods")
}

model Order {
  id                String  @id @default(uuid())
  clientName        String  @map("client_name")
  clientPhoneNumber String  @map("client_phone_number")
  streetName        String  @map("street_name")
  houseNumber       String  @map("house_number")
  neighborhood      String
  zipcode           String
  value             Int
  change            Int     @default(0)
  observation       String?
  cpf               String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  paymentMethodId String        @map("payment_method_id")
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  orderStatusId String?      @map("order_status_id")
  status        OrderStatus? @relation(fields: [orderStatusId], references: [id])

  productsOrders ProductsOrders[]

  @@map("orders")
}

model OrderStatus {
  id        String   @id @default(uuid())
  status    String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Order Order[]

  @@map("order_status")
}

model ProductsOrders {
  id       String @id @default(uuid())
  price    Int
  quantity Int    @default(1)

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")

  productSize   ProductSize? @relation(fields: [productSizeId], references: [id])
  productSizeId String?      @map("product_size_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("products_orders")
}

model UserManager {
  id       String @id @default(uuid())
  name     String
  login    String @unique
  password String

  @@map("user_managers")
}

model ProductSize {
  id        String   @id @default(uuid())
  unit      String   @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  products       ProductSizesProducts[]
  ProductsOrders ProductsOrders[]

  @@map("product_sizes")
}

model ProductSizesProducts {
  id    String @id @default(uuid())
  price Int

  productSize   ProductSize @relation(fields: [productSizeId], references: [id])
  productSizeId String      @map("product_size_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@map("products_sizes_products")
}
